
model {

  ############################
  # Variable standardization #
  ############################

  ############ standardized length for sizeBetas
  for( i in 1:(nEvalRows) ){
    stdLength[ evalRows[i] ] <-  ( length[ evalRows[i] ] - lengthMean[ season[ evalRows[i]],riverDATA[ evalRows[i] ] ] ) /
      lengthSD[ season[ evalRows[i]],riverDATA[ evalRows[i] ] ]

  }

  for( i in 1:( nLastObsRows ) ){
    stdLength[ lastObsRows[ i ] ] <-  ( length[ lastObsRows[i] ] - lengthMean[ season[ lastObsRows[i]],riverDATA[ lastObsRows[i] ] ] ) /
      lengthSD[ season[ lastObsRows[i]],riverDATA[ lastObsRows[i] ] ]
  }

  ############################
  ###### YOY variable ########
  ############################
  # 1 for YOY, 2 for not YOY

  for( i in 1:nEvalRows ){
    isYOY1[ evalRows[ i ] ] ~ dinterval( length[ evalRows[ i ] ],
                                         cutoffYOYDATA[ season[ evalRows[i] ],riverDATA[ evalRows[ i ] ], year[ evalRows[ i ] ] ]
    )
    isYOY[ evalRows[ i ] ] <- isYOY1[ evalRows[ i ] ] + 1

  }

  # isYOY for last observation for each individual
  for( i in 1:( nLastObsRows ) ){

    isYOY1[ lastObsRows[ i ] ] ~ dinterval( length[ lastObsRows[ i ] ],
                                            cutoffYOYDATA[ season[ lastObsRows[i] ],riverDATA[ lastObsRows[ i ] ], year[ lastObsRows[ i ] ] ]
    )
    isYOY[ lastObsRows[ i ] ] <- isYOY1[ lastObsRows[ i ] ] + 1
  }


  ############################
  ###### growth model ########
  ############################

  for( i in 1:nFirstObsRows ){
    length[ firstObsRows[i] ] ~ dnorm( 80,0.001 )
    lengthDATA[ firstObsRows[i] ] ~ dnorm( length[ firstObsRows[i] ],9 ) # length measurement error
  }

  for( i in 1:nEvalRows ){

    length[ evalRows[i] + 1 ] <- length[ evalRows[i] ] + gr[ evalRows[i] ]

    lengthDATA[ evalRows[i] + 1 ] ~ dnorm( length[ evalRows[i] + 1 ], 9 ) # length measurement error

    # add intervalMeans back in
    gr[ evalRows[i] ] ~ dnorm( expectedGR[ evalRows[i] ],
                               1/expectedGRSigma[ evalRows[i] ]^2
    )

    expectedGR[ evalRows[i] ]  <-
      grBetaInt[   isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[i] ],year[ evalRows[i] ] ]
    +    grBeta[1, isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[i] ] ] * stdLength[ evalRows[ i ] ]
    #      + grBeta[    season[ evalRows[i] ],riverDATA[ evalRows[i] ], 2 ] * isYOY[ evalRows[ i ] ]

    expectedGRSigma[ evalRows[i] ] <- grSigmaBeta[ isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[i] ],year[ evalRows[i] ] ]


    #       expectedGR[ evalRows[ i ] ]  <-

    #       grBetaInt[ isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ], year[ evalRows[ i ] ] ]
    #
    #     + grBeta[ 1,isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ] ] * stdLength[ evalRows[ i ] ]
    #     + grBeta[ 2,isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ] ] *   stdFlow[ evalRows[ i ] ]
    #     + grBeta[ 3,isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ] ] *   stdTemp[ evalRows[ i ] ]
    #     + grBeta[ 4,isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ] ] *   stdFlow[ evalRows[ i ] ] * stdTemp[ evalRows[ i ] ]
    #
    #     expectedGRSigma[ evalRows[ i ] ]  <- grSigmaBeta[ isYOY[ evalRows[i] ],season[ evalRows[i] ],riverDATA[ evalRows[ i ] ], year[ evalRows[ i ] ] ]

  }

  ############## Growth Priors ###############




  #   ############## Growth Priors
  for( yoy in 1:2 ){
    for( r in 1:( nRivers+0 ) ){
      for( s in 1:4 ){
        for(y in 1:nYears){
          grSigmaBeta[ yoy,s,r,y ] ~ dnorm( muGrSigmaBeta[ yoy,s,r ], 1 / sigmaGrSigmaBeta[ yoy,s,r ] ^ 2 )T(0,)
          grBetaInt[   yoy,s,r,y ] ~ dnorm(   muGrBetaInt[ yoy,s,r ], 1 /   sigmaGrBetaInt[ yoy,s,r ] ^ 2 )
        }
        muGrSigmaBeta[ yoy,s,r ] ~ dnorm( 0,0.001 )T(0,)
        sigmaGrSigmaBeta[ yoy,s,r ] ~ dunif( 0,100 )

        sigmaGrBetaInt[ yoy,s,r ] ~ dunif( 0,100 )
      }
      muGrBetaInt[ yoy,1,r ] ~ dnorm( 25, 0.01 )
      muGrBetaInt[ yoy,2,r ] ~ dnorm( 10, 0.01 )
      muGrBetaInt[ yoy,3,r ] ~ dnorm( 8, 0.01 )
      muGrBetaInt[ yoy,4,r ] ~ dnorm( 4, 0.01 )
    }
  }

  for( r in 1:( nRivers+0 ) ){
    for (i in 1){  # change range for more betas

      for( s in 1 ){
        grBeta[ i,1,s,r ] ~ dnorm( muGrBeta[ i,1 ],sigmaGrBeta[ i,1 ] )
      }
      for( s in 2 ){
        grBeta[ i,1,s,r ] ~ dunif( -0.001,0.001 ) # essentially set these = 0. very little data for these and dont want big values to mess up growth model
      }
      for( s in 3:4 ){
        grBeta[ i,1,s,r ] ~ dnorm( muGrBeta[ i,1 ],sigmaGrBeta[ i,1 ] )
      }
      for( s in 1:4 ){
        grBeta[ i,2,s,r ] ~ dnorm( muGrBeta[ i,2 ],sigmaGrBeta[ i,2 ] )
      }
    }
  }

  for ( yoy in 1:2 ){
    for(i in 1){  # change range for more betas

      muGrBeta[ i,yoy ] ~ dnorm( 0,0.001 )
      sigmaGrBeta[ i,yoy ] ~ dunif( 0,100 )

    }
  }


  # for( r in 1:( nRivers ) ){
  #   for( yoy in 1:2 ){
  #
  #     grBetaInt[ yoy,1,r ] ~ dnorm( 8, 0.01 )
  #     grBetaInt[ yoy,2,r ] ~ dnorm( 4, 0.01 )
  #     grBetaInt[ yoy,3,r ] ~ dnorm( 25, 0.01 )
  #     grBetaInt[ yoy,4,r ] ~ dnorm( 10, 0.01 )
  #
  #     grSigmaBeta[ yoy,1,r ] ~ dgamma(0.001,0.001)
  #     grSigmaBeta[ yoy,2,r ] ~ dgamma(0.001,0.001)
  #     grSigmaBeta[ yoy,3,r ] ~ dgamma(0.001,0.001)
  #     grSigmaBeta[ yoy,4,r ] ~ dgamma(0.001,0.001)
  #   }
  #
  #   grBeta[ 1,1,1,r ] ~ dnorm( 0,0.0001 )
  #   grBeta[ 1,1,2,r ] ~ dunif(-0.001,0.001)
  #   grBeta[ 1,1,3,r ] ~ dnorm( 0,0.0001 )
  #   grBeta[ 1,1,4,r ] ~ dnorm( 0,0.0001 )
  #
  #   grBeta[ 1,2,1,r ] ~ dnorm( 0,0.0001 )
  #   grBeta[ 1,2,2,r ] ~ dnorm( 0,0.0001 )
  #   grBeta[ 1,2,3,r ] ~ dnorm( 0,0.0001 )
  #   grBeta[ 1,2,4,r ] ~ dnorm( 0,0.0001 )
  #
  # }





} # model

